package com.tuoniao.sijibao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.tuoniao.sijibao.beans.AppDataBean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table APP_DATA_BEAN.
 */
public class AppDataBeanDao extends AbstractDao<AppDataBean, Void> {

    public static final String TABLENAME = "APP_DATA_BEAN";

    public AppDataBeanDao(DaoConfig config) {
        super(config);
    }

    public AppDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_DATA_BEAN' (" + //
                           "'APP_VERSION' TEXT," + // 0: appVersion
                           "'NEW_VERSION' TEXT);"); // 1: newVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_DATA_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    public AppDataBean readEntity(Cursor cursor, int offset) {
        AppDataBean entity = new AppDataBean( //
                                              cursor.isNull(offset + 0) ? null :
                                                      cursor.getString(offset + 0), // appVersion
                                              cursor.isNull(offset + 1) ? null :
                                                      cursor.getString(offset + 1) // newVersion
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppDataBean entity, int offset) {
        entity.setAppVersion(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNewVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppDataBean entity) {
        stmt.clearBindings();

        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(1, appVersion);
        }

        String newVersion = entity.getNewVersion();
        if (newVersion != null) {
            stmt.bindString(2, newVersion);
        }
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AppDataBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(AppDataBean entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity AppDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AppVersion = new Property(0,
                                                               String.class,
                                                               "appVersion",
                                                               false,
                                                               "APP_VERSION");
        public final static Property NewVersion = new Property(1,
                                                               String.class,
                                                               "newVersion",
                                                               false,
                                                               "NEW_VERSION");
    }

}
